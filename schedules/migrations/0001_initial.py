# Generated by Django 5.1.8 on 2025-04-04 18:26

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('appointments', '0001_initial'),
        ('clinics', '0001_initial'),
        ('doctors', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AvailabilityPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('preferred_working_days', models.JSONField(blank=True, default=list, help_text='List of preferred days (0-6)')),
                ('preferred_start_time', models.TimeField(blank=True, null=True)),
                ('preferred_end_time', models.TimeField(blank=True, null=True)),
                ('preferred_appointment_duration', models.PositiveIntegerField(default=30, help_text='Duration in minutes')),
                ('preferred_buffer_time', models.PositiveIntegerField(default=0, help_text='Buffer time between appointments in minutes')),
                ('max_appointments_per_day', models.PositiveIntegerField(default=0, help_text='0 means no limit')),
                ('max_consecutive_days', models.PositiveIntegerField(default=0, help_text='0 means no limit')),
                ('preferred_break_start_time', models.TimeField(blank=True, null=True)),
                ('preferred_break_end_time', models.TimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('doctor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='availability_preference', to='doctors.doctor')),
            ],
            options={
                'verbose_name': 'Availability Preference',
                'verbose_name_plural': 'Availability Preferences',
            },
        ),
        migrations.CreateModel(
            name='ScheduleException',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('start_time', models.TimeField(blank=True, help_text='If not specified, whole day is excepted', null=True)),
                ('end_time', models.TimeField(blank=True, help_text='If not specified, end of day is assumed', null=True)),
                ('exception_type', models.CharField(choices=[('vacation', 'Vacation'), ('sick_leave', 'Sick Leave'), ('personal_leave', 'Personal Leave'), ('conference', 'Conference'), ('holiday', 'Holiday'), ('other', 'Other')], max_length=20)),
                ('reason', models.TextField(blank=True, null=True)),
                ('is_recurring', models.BooleanField(default=False)),
                ('recurring_until', models.DateField(blank=True, null=True)),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule_exceptions', to='clinics.clinic')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule_exceptions', to='doctors.doctor')),
            ],
            options={
                'verbose_name': 'Schedule Exception',
                'verbose_name_plural': 'Schedule Exceptions',
                'ordering': ['start_date', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('day_of_week', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('break_start_time', models.TimeField(blank=True, null=True)),
                ('break_end_time', models.TimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('max_appointments', models.PositiveIntegerField(default=0, help_text='0 means no limit')),
                ('appointment_duration', models.PositiveIntegerField(default=30, help_text='Duration in minutes')),
                ('buffer_time', models.PositiveIntegerField(default=0, help_text='Buffer time between appointments in minutes')),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='clinics.clinic')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='doctors.doctor')),
            ],
            options={
                'verbose_name': 'Schedule',
                'verbose_name_plural': 'Schedules',
                'ordering': ['doctor', 'clinic', 'day_of_week'],
                'unique_together': {('doctor', 'clinic', 'day_of_week')},
            },
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_available', models.BooleanField(default=True)),
                ('is_booked', models.BooleanField(default=False)),
                ('appointment', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='time_slot', to='appointments.appointment')),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_slots', to='clinics.clinic')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_slots', to='doctors.doctor')),
            ],
            options={
                'verbose_name': 'Time Slot',
                'verbose_name_plural': 'Time Slots',
                'ordering': ['date', 'start_time'],
                'unique_together': {('doctor', 'clinic', 'date', 'start_time')},
            },
        ),
    ]
